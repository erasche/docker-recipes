serverpass "{{ .Env.SERVER_PASS }}"
adminpass "{{ .Env.ADMIN_PASS }}"

{{ range $e := ( split .Env.LOCALOP "," ) }}{{ $a := (split $e ":") }}
addlocalop {{ index $a 0 }} {{ index $a 1 }}{{ end }}

{{  if and (contains .Env "ADDBAN") (gt (len .Env.ADDBAN) 0) }}
{{ range $e := ( split .Env.ADDBAN "," ) }}
addban {{ $e }}{{ end }}
{{ end }}

{{  if and (contains .Env "ADDALLOW") (gt (len .Env.ADDALLOW) 0) }}
{{ range $e := ( split .Env.ADDALLOW "," ) }}
addallow {{ $e }}{{ end }}
{{ end }}

{{  if and (contains .Env "ADDMUTE") (gt (len .Env.ADDMUTE) 0) }}
{{ range $e := ( split .Env.ADDMUTE "," ) }}
addmute {{ $e }}{{ end }}
{{ end }}

{{  if and (contains .Env "ADDLIMIT") (gt (len .Env.ADDLIMIT) 0) }}
{{ range $e := ( split .Env.ADDLIMIT "," ) }}
addlimit {{ $e }}{{ end }}
{{ end }}
//
if (= $rehashing 0) [
    servertype {{ .Env.SERVER_TYPE }} // type of server, 1 = private (does not register with masterserver), 2 = public, 3 = dedicated
    // serveruprate 0 // maximum upload speed; cmdline: -suN
    serverip "0.0.0.0" // host which server binds to; cmdline: -siN

    servermaster {{ .Env.SERVER_MASTER }} // host server tries to use as master by default; cmdline: -smS
    serverport 28801 // port which server binds to (you must open this port [UDP] and this plus one, default 28801 and 28802); cmdline: -spN
    servermasterport  {{ .Env.SERVER_MASTER_PORT }} // master server port which server *connects* to; cmdline: -saN
    // TODO: IRC Stuff

    // TODO: master
    // THESE SETTINGS ARE FOR RUNNING A MASTER SERVER ONLY, DON'T USE THEM ON NORMAL SERVERS
    // masterserver 0 // determines if the builtin master server is enabled or not; cmdline: -msN
    // masterip "127.0.0.1" // host which master server binds to; cmdline: -miN
    // masterport 28800 // port which master server binds to; cmdline: -mpN
    // addauth handle flags pubkey email //add a user auth
    // addserverauth handle flags pubkey email //add a server auth
]

// TODO
//serverauthconnect 1 //determines if the server should attempt to auth
//serveraccountname handle //server's auth handle
//serveraccountpass privkey //server's private key
//serverauthkey handle privkey //combines accountname and accountpass

sv_aircoastscale {{ .Env.SV_AIRCOASTSCALE }}
sv_airefreshdelay {{ .Env.SV_AIREFRESHDELAY }}
sv_allowlock {{ .Env.SV_ALLOWLOCK }}
sv_allowmaps "{{ .Env.SV_ALLOWMAPS }}"
sv_autoadmin {{ .Env.SV_AUTOADMIN }}
sv_banlock {{ .Env.SV_BANLOCK }}
sv_bleeddamage {{ .Env.SV_BLEEDDAMAGE }}
sv_bleeddelay {{ .Env.SV_BLEEDDELAY }}
sv_bleedtime {{ .Env.SV_BLEEDTIME }}
sv_bomberattackreset {{ .Env.SV_BOMBERATTACKRESET }}
sv_bomberbasketmindist {{ .Env.SV_BOMBERBASKETMINDIST }}
sv_bomberbasketonly {{ .Env.SV_BOMBERBASKETONLY }}
sv_bomberbuffdamage {{ .Env.SV_BOMBERBUFFDAMAGE }}
sv_bomberbuffdelay {{ .Env.SV_BOMBERBUFFDELAY }}
sv_bomberbuffing {{ .Env.SV_BOMBERBUFFING }}
sv_bomberbuffshield {{ .Env.SV_BOMBERBUFFSHIELD }}
sv_bombercarryspeed {{ .Env.SV_BOMBERCARRYSPEED }}
sv_bombercarrytime {{ .Env.SV_BOMBERCARRYTIME }}
sv_bomberholdinterval {{ .Env.SV_BOMBERHOLDINTERVAL }}
sv_bomberholdlimit {{ .Env.SV_BOMBERHOLDLIMIT }}
sv_bomberholdpenalty {{ .Env.SV_BOMBERHOLDPENALTY }}
sv_bomberholdtime {{ .Env.SV_BOMBERHOLDTIME }}
sv_bomberlimit {{ .Env.SV_BOMBERLIMIT }}
sv_bombermaps "{{ .Env.SV_BOMBERMAPS }}"
sv_bomberpickupdelay {{ .Env.SV_BOMBERPICKUPDELAY }}
sv_bomberregenbuff {{ .Env.SV_BOMBERREGENBUFF }}
sv_bomberregendelay {{ .Env.SV_BOMBERREGENDELAY }}
sv_bomberregenextra {{ .Env.SV_BOMBERREGENEXTRA }}
sv_bomberresetdelay {{ .Env.SV_BOMBERRESETDELAY }}
sv_botbalance {{ .Env.SV_BOTBALANCE }}
sv_botlimit {{ .Env.SV_BOTLIMIT }}
sv_botscale {{ .Env.SV_BOTSCALE }}
sv_botskillmax {{ .Env.SV_BOTSKILLMAX }}
sv_botskillmin {{ .Env.SV_BOTSKILLMIN }}
sv_burndamage {{ .Env.SV_BURNDAMAGE }}
sv_burndelay {{ .Env.SV_BURNDELAY }}
sv_burntime {{ .Env.SV_BURNTIME }}
sv_capturebuffdamage {{ .Env.SV_CAPTUREBUFFDAMAGE }}
sv_capturebuffdelay {{ .Env.SV_CAPTUREBUFFDELAY }}
sv_capturebuffing {{ .Env.SV_CAPTUREBUFFING }}
sv_capturebuffshield {{ .Env.SV_CAPTUREBUFFSHIELD }}
sv_capturecarryspeed {{ .Env.SV_CAPTURECARRYSPEED }}
sv_capturedefenddelay {{ .Env.SV_CAPTUREDEFENDDELAY }}
sv_capturelimit {{ .Env.SV_CAPTURELIMIT }}
sv_capturemaps "{{ .Env.SV_CAPTUREMAPS }}"
sv_capturepickupdelay {{ .Env.SV_CAPTUREPICKUPDELAY }}
sv_captureprotectdelay {{ .Env.SV_CAPTUREPROTECTDELAY }}
sv_captureregenbuff {{ .Env.SV_CAPTUREREGENBUFF }}
sv_captureregendelay {{ .Env.SV_CAPTUREREGENDELAY }}
sv_captureregenextra {{ .Env.SV_CAPTUREREGENEXTRA }}
sv_captureresetdelay {{ .Env.SV_CAPTURERESETDELAY }}
sv_captureresetpenalty {{ .Env.SV_CAPTURERESETPENALTY }}
sv_captureteampenalty {{ .Env.SV_CAPTURETEAMPENALTY }}
sv_coopbalance {{ .Env.SV_COOPBALANCE }}
sv_coopmultibalance {{ .Env.SV_COOPMULTIBALANCE }}
sv_coopskillmax {{ .Env.SV_COOPSKILLMAX }}
sv_coopskillmin {{ .Env.SV_COOPSKILLMIN }}
sv_crclock {{ .Env.SV_CRCLOCK }}
sv_damagescale {{ .Env.SV_DAMAGESCALE }}
sv_damageself {{ .Env.SV_DAMAGESELF }}
sv_damageteam {{ .Env.SV_DAMAGETEAM }}
sv_deadpushscale {{ .Env.SV_DEADPUSHSCALE }}
sv_defaultmap "{{ .Env.SV_DEFAULTMAP }}"
sv_defaultmode {{ .Env.SV_DEFAULTMODE }}
sv_defaultmuts {{ .Env.SV_DEFAULTMUTS }}
sv_defendbuffdamage {{ .Env.SV_DEFENDBUFFDAMAGE }}
sv_defendbuffdelay {{ .Env.SV_DEFENDBUFFDELAY }}
sv_defendbuffing {{ .Env.SV_DEFENDBUFFING }}
sv_defendbuffshield {{ .Env.SV_DEFENDBUFFSHIELD }}
sv_defendhold {{ .Env.SV_DEFENDHOLD }}
sv_defendinterval {{ .Env.SV_DEFENDINTERVAL }}
sv_defendking {{ .Env.SV_DEFENDKING }}
sv_defendlimit {{ .Env.SV_DEFENDLIMIT }}
sv_defendmaps "{{ .Env.SV_DEFENDMAPS }}"
sv_defendoccupy {{ .Env.SV_DEFENDOCCUPY }}
sv_defendpoints {{ .Env.SV_DEFENDPOINTS }}
sv_defendregenbuff {{ .Env.SV_DEFENDREGENBUFF }}
sv_defendregendelay {{ .Env.SV_DEFENDREGENDELAY }}
sv_defendregenextra {{ .Env.SV_DEFENDREGENEXTRA }}
sv_demoautorec {{ .Env.SV_DEMOAUTOREC }}
sv_demoautoserversave {{ .Env.SV_DEMOAUTOSERVERSAVE }}
sv_democount {{ .Env.SV_DEMOCOUNT }}
sv_demolock {{ .Env.SV_DEMOLOCK }}
sv_demomaxsize {{ .Env.SV_DEMOMAXSIZE }}
sv_demoserverkeeptime {{ .Env.SV_DEMOSERVERKEEPTIME }}
sv_dominatecount {{ .Env.SV_DOMINATECOUNT }}
sv_duelclear {{ .Env.SV_DUELCLEAR }}
sv_duelcooloff {{ .Env.SV_DUELCOOLOFF }}
sv_duelcycle {{ .Env.SV_DUELCYCLE }}
sv_duelcycles {{ .Env.SV_DUELCYCLES }}
sv_duelmaps "{{ .Env.SV_DUELMAPS }}"
sv_duelprotect {{ .Env.SV_DUELPROTECT }}
sv_duelreset {{ .Env.SV_DUELRESET }}
sv_editlock {{ .Env.SV_EDITLOCK }}
sv_enemybalance {{ .Env.SV_ENEMYBALANCE }}
sv_enemyskillmax {{ .Env.SV_ENEMYSKILLMAX }}
sv_enemyskillmin {{ .Env.SV_ENEMYSKILLMIN }}
sv_enemyspawndelay {{ .Env.SV_ENEMYSPAWNDELAY }}
sv_enemyspawnstyle {{ .Env.SV_ENEMYSPAWNSTYLE }}
sv_enemyspawntime {{ .Env.SV_ENEMYSPAWNTIME }}
sv_floodlines {{ .Env.SV_FLOODLINES }}
sv_floodlock {{ .Env.SV_FLOODLOCK }}
sv_floodmute {{ .Env.SV_FLOODMUTE }}
sv_floodtime {{ .Env.SV_FLOODTIME }}
sv_floorcoastscale {{ .Env.SV_FLOORCOASTSCALE }}
sv_gamepaused {{ .Env.SV_GAMEPAUSED }}
sv_gamespeed {{ .Env.SV_GAMESPEED }}
sv_gamespeedlock {{ .Env.SV_GAMESPEEDLOCK }}
sv_gravityscale {{ .Env.SV_GRAVITYSCALE }}
sv_hitpushscale {{ .Env.SV_HITPUSHSCALE }}
sv_hitstunscale {{ .Env.SV_HITSTUNSCALE }}
sv_holdmaps "{{ .Env.SV_HOLDMAPS }}"
sv_impulseallowed {{ .Env.SV_IMPULSEALLOWED }}
sv_impulseboost {{ .Env.SV_IMPULSEBOOST }}
sv_impulsecost {{ .Env.SV_IMPULSECOST }}
sv_impulsecount {{ .Env.SV_IMPULSECOUNT }}
sv_impulsedash {{ .Env.SV_IMPULSEDASH }}
sv_impulsedelay {{ .Env.SV_IMPULSEDELAY }}
sv_impulsejump {{ .Env.SV_IMPULSEJUMP }}
sv_impulselimit {{ .Env.SV_IMPULSELIMIT }}
sv_impulsemelee {{ .Env.SV_IMPULSEMELEE }}
sv_impulsemeter {{ .Env.SV_IMPULSEMETER }}
sv_impulseparkour {{ .Env.SV_IMPULSEPARKOUR }}
sv_impulseregen {{ .Env.SV_IMPULSEREGEN }}
sv_impulseregencrouch {{ .Env.SV_IMPULSEREGENCROUCH }}
sv_impulseregeninair {{ .Env.SV_IMPULSEREGENINAIR }}
sv_impulseregenmove {{ .Env.SV_IMPULSEREGENMOVE }}
sv_impulseregenpacing {{ .Env.SV_IMPULSEREGENPACING }}
sv_impulseregenslide {{ .Env.SV_IMPULSEREGENSLIDE }}
sv_impulseskate {{ .Env.SV_IMPULSESKATE }}
sv_impulseslide {{ .Env.SV_IMPULSESLIDE }}
sv_impulsespeed {{ .Env.SV_IMPULSESPEED }}
sv_impulsespread {{ .Env.SV_IMPULSESPREAD }}
sv_impulsestyle {{ .Env.SV_IMPULSESTYLE }}
sv_inairspread {{ .Env.SV_INAIRSPREAD }}
sv_instadelay {{ .Env.SV_INSTADELAY }}
sv_instaprotect {{ .Env.SV_INSTAPROTECT }}
sv_instaweapon {{ .Env.SV_INSTAWEAPON }}
sv_intermlimit {{ .Env.SV_INTERMLIMIT }}
sv_itemsallowed {{ .Env.SV_ITEMSALLOWED }}
sv_itemspawndelay {{ .Env.SV_ITEMSPAWNDELAY }}
sv_itemspawnstyle {{ .Env.SV_ITEMSPAWNSTYLE }}
sv_itemspawntime {{ .Env.SV_ITEMSPAWNTIME }}
sv_itemthreshold {{ .Env.SV_ITEMTHRESHOLD }}
sv_jumpspeed {{ .Env.SV_JUMPSPEED }}
sv_kamikaze {{ .Env.SV_KAMIKAZE }}
sv_kicklock {{ .Env.SV_KICKLOCK }}
sv_kickpushcrouch {{ .Env.SV_KICKPUSHCROUCH }}
sv_kickpushscale {{ .Env.SV_KICKPUSHSCALE }}
sv_kickpushsway {{ .Env.SV_KICKPUSHSWAY }}
sv_kickpushzoom {{ .Env.SV_KICKPUSHZOOM }}
sv_kingmaps "{{ .Env.SV_KINGMAPS }}"
sv_limitlock {{ .Env.SV_LIMITLOCK }}
sv_liquidcoastscale {{ .Env.SV_LIQUIDCOASTSCALE }}
sv_liquidspeedscale {{ .Env.SV_LIQUIDSPEEDSCALE }}
sv_mainmaps "{{ .Env.SV_MAINMAPS }}"
sv_maphistory {{ .Env.SV_MAPHISTORY }}
sv_mapslock {{ .Env.SV_MAPSLOCK }}
sv_maxcarry {{ .Env.SV_MAXCARRY }}
sv_maxhealth {{ .Env.SV_MAXHEALTH }}
sv_maxhealthvampire {{ .Env.SV_MAXHEALTHVAMPIRE }}
sv_modelock {{ .Env.SV_MODELOCK }}
sv_modelockfilter {{ .Env.SV_MODELOCKFILTER }}
sv_movecrawl {{ .Env.SV_MOVECRAWL }}
sv_moveinair {{ .Env.SV_MOVEINAIR }}
sv_moverun {{ .Env.SV_MOVERUN }}
sv_movespeed {{ .Env.SV_MOVESPEED }}
sv_movespread {{ .Env.SV_MOVESPREAD }}
sv_movestepdown {{ .Env.SV_MOVESTEPDOWN }}
sv_movestepup {{ .Env.SV_MOVESTEPUP }}
sv_movestrafe {{ .Env.SV_MOVESTRAFE }}
sv_movestraight {{ .Env.SV_MOVESTRAIGHT }}
sv_multikilldelay {{ .Env.SV_MULTIKILLDELAY }}
sv_multimaps "{{ .Env.SV_MULTIMAPS }}"
sv_mutelock {{ .Env.SV_MUTELOCK }}
sv_mutslockfilter {{ .Env.SV_MUTSLOCKFILTER }}
sv_mutslockforce {{ .Env.SV_MUTSLOCKFORCE }}
sv_overtimeallow {{ .Env.SV_OVERTIMEALLOW }}
sv_overtimelimit {{ .Env.SV_OVERTIMELIMIT }}
sv_pointlimit {{ .Env.SV_POINTLIMIT }}
sv_radiallimited {{ .Env.SV_RADIALLIMITED }}
sv_radialscale {{ .Env.SV_RADIALSCALE }}
sv_regendelay {{ .Env.SV_REGENDELAY }}
sv_regenhealth {{ .Env.SV_REGENHEALTH }}
sv_regentime {{ .Env.SV_REGENTIME }}
sv_resetallowsonend {{ .Env.SV_RESETALLOWSONEND }}
sv_resetbansonend {{ .Env.SV_RESETBANSONEND }}
sv_resetlimitsonend {{ .Env.SV_RESETLIMITSONEND }}
sv_resetmmonend {{ .Env.SV_RESETMMONEND }}
sv_resetmutesonend {{ .Env.SV_RESETMUTESONEND }}
sv_resetvarsonend {{ .Env.SV_RESETVARSONEND }}
sv_rotatecycle {{ .Env.SV_ROTATECYCLE }}
sv_rotatemaps {{ .Env.SV_ROTATEMAPS }}
sv_rotatemapsfilter {{ .Env.SV_ROTATEMAPSFILTER }}
sv_rotatemode {{ .Env.SV_ROTATEMODE }}
sv_rotatemodefilter {{ .Env.SV_ROTATEMODEFILTER }}
sv_rotatemuts {{ .Env.SV_ROTATEMUTS }}
sv_rotatemutsfilter {{ .Env.SV_ROTATEMUTSFILTER }}
sv_serverclients {{ .Env.SV_SERVERCLIENTS }}
sv_serverdesc {{ .Env.SV_SERVERDESC }}
sv_servermotd {{ .Env.SV_SERVERMOTD }}
sv_serveropen {{ .Env.SV_SERVEROPEN }}
sv_shockdamage {{ .Env.SV_SHOCKDAMAGE }}
sv_shockdelay {{ .Env.SV_SHOCKDELAY }}
sv_shocktime {{ .Env.SV_SHOCKTIME }}
sv_slidecoastscale {{ .Env.SV_SLIDECOASTSCALE }}
sv_spawndelay {{ .Env.SV_SPAWNDELAY }}
sv_spawneditlock {{ .Env.SV_SPAWNEDITLOCK }}
sv_spawngrenades {{ .Env.SV_SPAWNGRENADES }}
sv_spawnhealth {{ .Env.SV_SPAWNHEALTH }}
sv_spawnmines {{ .Env.SV_SPAWNMINES }}
sv_spawnprotect {{ .Env.SV_SPAWNPROTECT }}
sv_spawnrotate {{ .Env.SV_SPAWNROTATE }}
sv_spawnweapon {{ .Env.SV_SPAWNWEAPON }}
sv_speclock {{ .Env.SV_SPECLOCK }}
sv_spreecount {{ .Env.SV_SPREECOUNT }}
sv_stillspread {{ .Env.SV_STILLSPREAD }}
sv_teambalance {{ .Env.SV_TEAMBALANCE }}
sv_timelimit {{ .Env.SV_TIMELIMIT }}
sv_trialdelay {{ .Env.SV_TRIALDELAY }}
sv_trialdelayex {{ .Env.SV_TRIALDELAYEX }}
sv_trialmaps "{{ .Env.SV_TRIALMAPS }}"
sv_trialweapon {{ .Env.SV_TRIALWEAPON }}
sv_varslock {{ .Env.SV_VARSLOCK }}
sv_vetolock {{ .Env.SV_VETOLOCK }}
sv_voteinterm {{ .Env.SV_VOTEINTERM }}
sv_votelimit {{ .Env.SV_VOTELIMIT }}
sv_votelock {{ .Env.SV_VOTELOCK }}
sv_votestyle {{ .Env.SV_VOTESTYLE }}
sv_votewait {{ .Env.SV_VOTEWAIT }}
sv_wavepushscale {{ .Env.SV_WAVEPUSHSCALE }}
//
// weapon variables are in the form of sv_<weapon><attribute>[1|2], where weapon is the name of the weapon
//  attribute is one of the following attributes, and 1|2 applies if the attribute differs between primary and secondary
//
//  name: displayed name for the weapon in-game
//  modes: bitmask of game modes in which this weapon is allowed (if positive), or disallowed (if negative), see $modebit list above
//  muts: bitmask of mutators in which this weapon is allowed (if positive), or disallowed (if negative), see $mutsbit list above
//  ammoadd: the amount added when picking up the weapon or reloading it
//  ammomax: the maximum amount the clip of this weapon can hold
//  ammosub[1|2]: the amount taken from the clip for each firing action, set to zero for unlimited ammo
//  delayattack[1|2]: the time it takes after each firing action for the weapon to be ready again
//  delayreload: the time it takes for the weapon to reload one 'add' unit
//  damage[1|2]: the amount of damage a projectile from each firing action does
//  speed[1|2]: the speed of a projectile from each firing action
//  power[1|2]: when more than zero, determines that the weapon can be 'cooked' this long before firing
//  time[1|2]: the maximum lifetime of a projectile for each firing action
//  proxdelay[1|2]: when more than zero, projectiles from this weapon will be delayed this long
//  guideddelay[1|2]: when more than zero, projectiles from this weapon will delay guided settings by this long
//  escapedelay[1|2]: when more than zero, projectiles from this weapon will not be able to hurt its owner for this long
//  explode[1|2]: if more than zero, a projectile from this firing action will explode at the end of its life or based on collision settings
//  rays[1|2]: the amount of projectiles spawned from one shot of each firing action
//  spread[1|2]: determines the amount a projectile from each firing action skews off-center
//  spreadz[1|2]: when zero, keeps spread projectiles aligned horizontally, else divide the z axis this much
//  aiskew[1|2]: determines 'added stupidity' for each weapon for AI counterparts
//  fragweap[1|2]: when projectiles from this firing action are destroyed, create projectiles from this kind of weapon (+10 = alt fire for the weapon)
//  flakdamage[1|2]: flak of this type deals this much damage
//  fragrays[1|2]: when creating flak, create this many projectiles for it
//  fragtime[1|2]: flak projectiles from this weapon last this long
//  fragspeed[1|2]: flak projectiles from this weapon start with this much speed (may be influenced by flakspread/flakskew and flakrel)
//  collide[1|2]: bitwise value which determines collision properties for a projectile from each firing action
//      IMPACT_GEOM = 1     BOUNCE_GEOM = 2     IMPACT_PLAYER = 4   BOUNCE_PLAYER = 8   RADIAL_PLAYER = 16  COLLIDE_TRACE = 32  COLLIDE_OWNER = 64  COLLIDE_CONT = 128  COLLIDE_STICK = 256
//  extinguish[1|2]: determines if a projectile from each firing action is extinguished by water
//  cooked[1|2]: determines what happens the longer a weapon is cooked (bitmask): 0 = cannot be cooked, 1 = projectile becomes bigger, 2 = projectile becomes smaller, 4 = projectile lasts longer, 8 = projectile disappears sooner, 16 = projectile moves faster, 32 = projectile moves slower, 64 = create extra projectiles, 128 = switch to scope view before shooting (this last one applies to secondary fire only)
//  guided[1|2]: determines guided style for a projectile, 0 = off, 1 = follow crosshair, 2 = home crosshair target (+1 only first target), 4 = home projectile target (+1 only first target)
//  radial[1|2]: boolean 0 or 1, sets a projectile for each firing action to do continuous radial damage inside the 'explode' radius during transit
//  residual[1|2]: determines if a projectile from each firing action has one or more residual effects, 0 = off, 1 = burns, 2 = bleeds, 4 = shocks
//  residualundo[1|2]: determines if a projectile can put out the residual effects above
//  fullauto[1|2]: boolean 0 or 1, determines if each firing action is fully automatic (click-and-hold) or not (click-and-click)
//  disabled: determines if this weapon type is allowed to be used at all
//  laser: determines if this weapon has a laser pointer which is projected to the point where the player is aiming
//  taperin[1|2]: determines the maximum amount a projectile from each firing action is allowed to 'taper in' to over its lifetime
//  taperout[1|2]: determines the maximum amount a projectile from each firing action is allowed to 'taper out' to over its lifetime
//  elasticity[1|2]: multiplier of velocity for a projectile of each firing action when doing a bounce event
//  reflectivity[1|2]: guard angle for a projectile of each firing action when doing a bounce event
//  relativity[1|2]: multiplier of player velocity added to a projectile of each firing action
//  waterfric[1|2]: multiplier of velocity for a projectile of each firing action when in water
//  weight[1|2]: relative weight for a projectile of each firing action
//  radius[1|2]: determines the size for a projectile of each firing action
//  kickpush[1|2]: determines the amount of pushback from shooting each firing action
//  hitpush[1|2]: determines the amount of pushback from getting hit by this projectile
//  slow[1|2]: slow target hit with a projectile from this by this ammount
//  aidist[1|2]: determines the 'maximum distance' a weapon can be shot at, used by AI to determine weapon effectiveness ranges
//  partsize[1|2]: determines the maximum particle size of a projectile from each firing action
//  partlen[1|2]: determines the maximum tape particle length of a projectile from each firing action
//  frequency: determines the multiplier of itemspawntime in which items of this type respawn in
//  wavepush[1|2]: determines the multiplier of explode radius this weapon pushes in
//  delta[1|2]: determines the amount by which each firing action is guided
//  trace[1|2]: determines the multiplier of length to apply to traced weapons
//  damagehead[1|2]: determines the multiplier of damage for head shots
//  damagetorso[1|2]: determines the multiplier of damage for torso shots
//  damagelegs[1|2]: determines the multiplier of damage for leg shots
//  damageself[1|2]: determines whether this weapon can hit the player who fired it
//  damageteam[1|2]: determines whether this weapon can hit teammates of the player who fired it
//  damagepenalty[1|2]: determines whether team-kills caused by this weapon should result in point loss
//  fragscale[1|2]: flak created by this firing action is scaled by this much
//  fragspread[1|2]: flak created by this firing action spreads its direction randomly by this much if it doesn't impact a player
//  fragrel[1|2]: flak created by this firing action retains this much of its parent relative momentum
//  fragoffset[1|2]: flak created by this firing action is offset by this distance if it impacts a player before being created
//  fragskew[1|2]: flak created by this firing action spreads its direction randomly by this much when it impacts a player
//  wavepush[1|2]: flak determines the multiplier of explode radius this weapon pushes in
//
// EOF
